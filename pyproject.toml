# https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# https://python-poetry.org/docs/pyproject/
[tool.poetry]
name = "graphchain"
version = "1.2.0"
description = "An efficient cache for the execution of dask graphs."
authors = ["Laurent Sorber <laurent.sorber@gmail.com>"]
readme = "README.md"
repository = "https://github.com/radix-ai/graphchain"

# https://commitizen-tools.github.io/commitizen/config/
[tool.commitizen]
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "1.2.0"
version_files = ["pyproject.toml:version"]

# https://python-poetry.org/docs/dependency-specification/
[tool.poetry.dependencies]
cloudpickle = ">=1.0.0,<3.0.0"
dask = ">=2020.12.0"
fs-s3fs = "^1"
joblib = "^1"
lz4 = "^3"
python = "^3.8"

# https://python-poetry.org/docs/master/managing-dependencies/
# TODO: Split in `tool.poetry.group.dev` and `tool.poetry.group.test` when Poetry 1.2.0 is released.
[tool.poetry.dev-dependencies]
cruft = "^2.10.1"
black = "^21.12b0"
commitizen = "^2.20.2"
coverage = { extras = ["toml"], version = "^6.2" }
darglint = "^1.8.1"
flake8 = "^4.0.1"
flake8-comprehensions = "^3.7.0"
flake8-bandit = "^2.1.2"
flake8-bugbear = "^21.11.29"
flake8-mutable = "^1.2.0"
flake8-pytest-style = "^1.6.0"
flake8-rst-docstrings = "^0.2.5"
flake8-tidy-imports = "^4.5.0"
flake8-use-fstring = "^1.3"
flake8-print = "^4.0.0"
isort = "^5.10.1"
mypy = "^0.940"
pandas = "^1.3.5"
pdoc = "^8.0.1"
pep8-naming = "^0.12.1"
poethepoet = "^0.11.0"
pre-commit = "^2.16.0"
pydocstyle = { extras = ["toml"], version = "^6.1.1" }
pytest = "^6.2.5"
pytest-clarity = "^1.0.1"
pytest-mock = "^3.6.1"
pytest-xdist = "^2.5.0"
pyupgrade = "^2.29.1"
safety = "^1.10.3"
shellcheck-py = "^0.8.0"

# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
[tool.black]
line-length = 100

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
fail_under = 50
show_missing = true
skip_covered = true

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
branch = true
command_line = "--module pytest tests"
data_file = "reports/.coverage"
source = ["src"]

# https://coverage.readthedocs.io/en/latest/config.html#xml
[tool.coverage.xml]
output = "reports/coverage.xml"

# https://pycqa.github.io/isort/docs/configuration/profiles/
[tool.isort]
known_first_party = "tests"
line_length = 100
profile = "black"

# https://mypy.readthedocs.io/en/latest/config_file.html
[tool.mypy]
junit_xml = "reports/mypy.xml"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

# http://www.pydocstyle.org/en/latest/usage.html#configuration-files
[tool.pydocstyle]
convention = "numpy"

# https://docs.pytest.org/en/latest/customize.html#adding-default-options
[tool.pytest.ini_options]
addopts = "-W error -W ignore::DeprecationWarning --exitfirst --verbosity=2 --junitxml=reports/pytest.xml"
junit_family = "xunit2"
testpaths = "tests"

# https://github.com/nat-n/poethepoet
[tool.poe.tasks]

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      graphchain
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring flavor (default: numpy)"
    name = "docformat"
    options = ["--docformat"]
    default = "numpy"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"
  
  [tool.poe.tasks.install]
  help = "Install this package's Python environment"

    [[tool.poe.tasks.install.sequence]]
    cmd = "poetry install --no-interaction"

    [[tool.poe.tasks.install.sequence]]
    cmd = """
      pre-commit install
        --install-hooks
        --hook-type commit-msg
        --hook-type pre-commit
      """

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --full-report || true"

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
